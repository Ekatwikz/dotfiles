# Fetch if there's some fetch script
# See: https://github.com/romkatv/powerlevel10k/issues/1883
[ ! -f "$HOME/.fetch_on_shell_start.sh" ] \
    || { typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet \
    && $HOME/.fetch_on_shell_start.sh ; }

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# p10k renders wayyy to goofy in a tty
if [[ $TERM == "linux" ]]; then
    ZSH_THEME="gnzh"
else
    ZSH_THEME="powerlevel10k/powerlevel10k"
fi

zstyle ':omz:plugins:nvm' autload yes
zstyle ':omz:plugins:npm' autload yes

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
plugins=(
    git
    zsh-autosuggestions
    gh
    colored-man-pages
    node
    npm
    command-not-found
    aliases
    colorize
    rust
    golang

    zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]]\
    || source ~/.p10k.zsh

### Comon stuffs and things

[ ! -f "$HOME/.commonrc.sh" ] \
    || . "$HOME/.commonrc.sh"

### zsh specific:

{ ! command -v yazi || command -v y ; } 1>/dev/null ||
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Add deno completions to search path
if [[ ":$FPATH:" != *":$HOME/.zsh/completions:"* ]]; then export FPATH="$HOME/.zsh/completions:$FPATH"; fi
source_if_exists "$HOME/.deno/env"

# Autojump, first one is the old one or something, idk
# source_if_exists "/usr/share/autojump/autojump.sh"
# source_if_exists "$HOME/.autojump/etc/profile.d/autojump.sh"

# for alacritty maybe? idk
[ ! -d ${ZDOTDIR:-~}/.zsh_functions ]\
    || fpath+=${ZDOTDIR:-~}/.zsh_functions

# Go > Python xdd
! command -v chroma 1> /dev/null \
    || export ZSH_COLORIZE_TOOL="chroma"

! command -v zoxide 1>/dev/null \
    || { eval "$(zoxide init zsh)" && 
    alias zi='_ZO_FZF_OPTS=--scheme=path zi' ; }

# The next line updates PATH for the Google Cloud SDK.
source_if_exists "$HOME/.local/bin/google-cloud-sdk/path.zsh.inc"

# The next line enables shell command completion for gcloud.
source_if_exists "$HOME/.local/bin/google-cloud-sdk/completion.zsh.inc"

# Databricks CLI (probably not needed any more lol)
# command -v databricks 1> /dev/null \
#     && . <(databricks completion zsh)

### Semi-auto setups:
# (ie: stuff that was generated by various programs)

# Conda
__conda_setup="$($HOME'/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/anaconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup

# Miniconda
__miniconda_setup="$($HOME'/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__miniconda_setup"
else
    if [ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/miniconda3/bin:$PATH"
    fi
fi
unset __miniconda_setup

# TMP: Nuke nvm nonsense, it's sooo slow ugh
# NVM stuff
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] \
    && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] \
    && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# TODO: add quiet mode here?
# autoload -U add-zsh-hook
load-nvmrc() {
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install 1>/dev/null
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use 1>/dev/null
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    #echo "Reverting to nvm default version"
    nvm use default
  fi
}
#add-zsh-hook chpwd load-nvmrc
! command -v nvm 1> /dev/null || \
    load-nvmrc

# pnpm
export PNPM_HOME="$HOME/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

